#!/usr/bin/env php
<?php

/*
 * This script assumes you're in a Laravel project that has access
 * to the Str, Collection and Symfony's Process class.
 */

use Illuminate\Support\Collection;
use Symfony\Component\Process\Process;
use Illuminate\Support\Str;

require_once 'vendor/autoload.php';

/**
 * Lists PHPunit tests in the following format:
 *  - Tests\Support\UuidTest::it_can_create_a_uuid_from_a_string
 *  - Tests\Support\UuidTest::it_can_not_create_a_uuid_from_null
 *  - ...
 */
$process = new Process(['./vendor/bin/pest', '--list-tests']);
$process->mustRun();

function getTests(int $ciNodeIndex, int $ciNodeTotal): Collection
{
    $args = [
        'php',
        'artisan',
        'test',
        '--list-tests',
    ];
    $process = new Process($args);
    $process->mustRun();

    return Str::of($process->getOutput())
        ->explode("\n") // Break the output from new lines into an array
        ->filter(fn (string $test) => str_contains($test, ' - ')) // Only lines with " - "
        ->map(fn (string $test) => addslashes(
            Str::of($test)
                ->replace('- ', '') // Strip the "- "
                ->trim()
                ->explode('::') // Only the class, not the method
                ->get(0)
        ))
        ->map(fn (string $test) => Str::replaceFirst('P\\\\', '', $test)) // Remove the leading P\\
        ->filter(fn (string $test) => !empty($test)) // Make sure there are no empty lines
        ->unique() // We only need unique classes
        ->split($ciNodeTotal) // Split it into equally sized chunks
        ->get($ciNodeIndex);
}

/**
 * Run phpunit with a filter:
 * phpunit --filter 'TestClass|AnotherTestClass|...'
 */
$ciNodeIndex = (int) env('CI_NODE_INDEX', 0);
$ciNodeTotal = (int) env('CI_NODE_TOTAL', 1);
$tests = getTests($ciNodeIndex, $ciNodeTotal);

echo sprintf("Found %d tests (%d/%d)", $tests->count(), $ciNodeIndex + 1, $ciNodeTotal) . PHP_EOL;
foreach ($tests as $test) {
    echo sprintf('- %s', stripslashes($test)) . PHP_EOL;
}

$process = new \Symfony\Component\Process\Process(['./vendor/bin/pest', '--filter', $tests->join('|')], timeout: null);
$process->start();

// Make sure we have live data output
foreach ($process as $type => $data) {
    echo $data;
}

$process->wait();

// Exit using PHPUnit's exit code to have the action pass/fail
exit($process->getExitCode());
